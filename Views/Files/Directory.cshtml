@model RemoteDirectoryList.Models.DirectoryViewModel
@{
    var requestPath = Context.Request.Query["path"].ToString().TrimStart('\\');
    if (requestPath == "")
    {
        requestPath = "/";
    }

    RemoteDirectoryList.Models.RootDirectoryTabModel[] tabs = (RemoteDirectoryList.Models.RootDirectoryTabModel[])ViewData["tabs"];

    ViewData["Title"] = "Files - " + requestPath;
}

<h1>Files</h1>
<button class="btn btn-link" data-toggle="modal" data-target="#uploadModal">Upload file</button>

<div class="clearfix mt-2">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            @{
                var breadcrumbTree = requestPath.Split('/').Where(p => !string.IsNullOrWhiteSpace(p)).ToList();
                if (breadcrumbTree.Count == 0)
                {
                    breadcrumbTree.Add("/");
                }
                else
                {
                    breadcrumbTree[0] = breadcrumbTree[0].Insert(0, "/ ");
                }
            }
            <li class="font-weight-bold">@tabs.First(t => t.Id == Model.TabId).DisplayName > &nbsp;</li>
            @foreach (var pathName in breadcrumbTree)
            {
                <li class="breadcrumb-item active" aria-current="page">@pathName</li>
            }
        </ol>
    </nav>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Size</th>
            <th>Last Modify Time (Utc)</th>
            <th>Operations</th>
        </tr>
    </thead>
    <tbody>
        @if (!Model.IsRootDirectory)
        {
            <tr>
                <td colspan="4"><a asp-action="Directory" asp-route-path="@Model.ParentDirectoryPath" asp-route-tabId="@Model.TabId">Parent Directory</a></td>
            </tr>
        }
        @foreach (var file in Model.Files)
        {
            @if (file.IsDirectory)
            {
                <tr>
                    <td>
                        <a asp-action="Directory" asp-route-path="@requestPath/@file.Name" asp-route-tabId="@Model.TabId">@file.Name</a>
                    </td>
                    <td></td>
                    <td>@file.LastModifyTime.ToString("G")</td>
                    <td></td>
                </tr>
            }
            else
            {
                <tr>
                    <td>@file.Name</td>
                    <td>
                        <partial name="_FileSizePartial" model="file.Size" />
                    </td>
                    <td>@file.LastModifyTime.ToString("G")</td>
                    <td>
                        <a class="btn btn-outline-primary btn-sm" asp-action="Download" asp-route-path="@requestPath/@file.Name" asp-route-tabId="@Model.TabId" target="_blank">Download</a>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<!-- File upload dialog -->
<div class="modal fade" id="uploadModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadModalLabel">Upload file</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <input type="file" class="dropify" id="file-upload" data-max-file-size="2G" />
                <div class="progress mt-2" style="height: 20px;">
                    <div id="upload-progress" class="progress-bar" role="progressbar" style="width: 0%" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="uploadFile()" id="confirm-upload">Okay</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/dropify/dist/js/dropify.min.js"></script>
    <script>
        var tabId = @Html.Raw($"\"{Model.TabId}\"");
        var path = @Html.Raw($"\"{requestPath}\"");

        var upload;

        var dropify = $('.dropify').dropify();

        dropify.on('dropify.afterClear', function (event, element) {
            document.getElementById("uploadModalLabel").innerHTML = "Upload cancelled";

            upload.abort();
        });

        function uploadFile() {
            // Lock button
            document.getElementById('confirm-upload').setAttribute('disabled', '');

            // Get the selected file from the input element
            var file = document.getElementById('file-upload').files[0];

            // Create a new tus upload
            upload = new tus.Upload(file, {
                endpoint: "/api/upload",
                retryDelays: [0, 3000, 5000, 10000, 20000],
                metadata: {
                    filename: file.name,
                    filetype: file.type,
                    tabId: tabId,
                    path: path,
                },
                onError: function (error) {
                    console.error("Failed because: " + error);
                    document.getElementById("uploadModalLabel").innerHTML = "Upload failed";

                    document.getElementById("upload-progress").classList.remove("progress-bar-animated");
                    document.getElementById("upload-progress").classList.remove("bg-info");
                    document.getElementById("upload-progress").classList.remove("progress-bar-striped");
                    document.getElementById("upload-progress").classList.add("bg-danger");

                    // Unlock button
                    document.getElementById('confirm-upload').removeAttribute('disabled');
                },
                onProgress: function (bytesUploaded, bytesTotal) {
                    var percentage = (bytesUploaded / bytesTotal * 100).toFixed(2);
                    console.log(bytesUploaded, bytesTotal, percentage + "%");
                    document.getElementById("upload-progress").style = "width: " + percentage + "%";
                    document.getElementById("uploadModalLabel").innerHTML = "Upload file (" + percentage + "%)";
                },
                onSuccess: function () {
                    console.log("Download %s from %s", upload.file.name, upload.url)
                    document.getElementById("upload-progress").classList.remove("progress-bar-animated");
                    document.getElementById("upload-progress").classList.remove("bg-info");
                    document.getElementById("upload-progress").classList.remove("progress-bar-striped");
                    document.getElementById("upload-progress").classList.add("bg-success");

                    // Unlock button
                    document.getElementById('confirm-upload').removeAttribute('disabled');

                }
            })

            // Check if there are any previous uploads to continue.
            upload.findPreviousUploads().then(function (previousUploads) {
                // Found previous uploads so we select the first one.
                if (previousUploads.length) {
                    upload.resumeFromPreviousUpload(previousUploads[0]);

                    upload.start();
                }
            })

            // Start the upload
            upload.start();
            document.getElementById("upload-progress").classList.remove("bg-success");
            document.getElementById("upload-progress").classList.add("progress-bar-animated");
            document.getElementById("upload-progress").classList.add("bg-info");
            document.getElementById("upload-progress").classList.add("progress-bar-striped");
        }
    </script>
    <script src="~/lib/tus-js-client/dist/tus.min.js"></script>
}

@section Stylesheets {
    <link rel="stylesheet" href="~/lib/dropify/dist/css/dropify.min.css" />
}
